AWSTemplateFormatVersion: '2010-09-09'
Description: 'Static Resume Website hosted on S3 with CloudFront distribution and Route 53 domain'

Parameters:
  DomainName:
    Type: String
    Description: 'Domain name for the resume website (e.g., resume.example.com)'
    Default: ''
  
  HostedZoneId:
    Type: String
    Description: 'Route 53 Hosted Zone ID for the domain (leave empty if not using custom domain)'
    Default: ''
  
  CertificateArn:
    Type: String
    Description: 'ACM Certificate ARN for HTTPS (must be in us-east-1 region for CloudFront)'
    Default: ''
  
  EnableWAF:
    Type: String
    Description: 'Enable WAF Web ACL for additional security protection'
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  
  EnableRoute53:
    Type: String
    Description: 'Enable Route 53 DNS record creation (requires HostedZoneId and DomainName)'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  
  EnableAccessLogs:
    Type: String
    Description: 'Enable CloudFront access logging'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  
  Environment:
    Type: String
    Description: 'Environment name (dev, staging, prod)'
    Default: 'prod'
    AllowedValues:
      - 'dev'
      - 'staging'
      - 'prod'
  
  ProjectName:
    Type: String
    Description: 'Project name for cost tracking'
    Default: 'resume-website'

Conditions:
  HasDomainName: !Not [!Equals [!Ref DomainName, '']]
  HasHostedZone: !Not [!Equals [!Ref HostedZoneId, '']]
  HasCertificate: !Not [!Equals [!Ref CertificateArn, '']]
  EnableWAFCondition: !Equals [!Ref EnableWAF, 'true']
  EnableRoute53Condition: !And 
    - !Equals [!Ref EnableRoute53, 'true']
    - !Condition HasHostedZone
    - !Condition HasDomainName
  EnableAccessLogsCondition: !Equals [!Ref EnableAccessLogs, 'true']

Resources:
  # S3 Bucket for website hosting
  ResumeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-resume-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: 'storage'
        - Key: Service
          Value: 'resume-website'
        - Key: CostCenter
          Value: 'website-hosting'
        - Key: Owner
          Value: 'resume-owner'
        - Key: ManagedBy
          Value: 'cloudformation'

  # S3 Bucket Policy for CloudFront OAC access
  ResumeBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ResumeBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: 's3:GetObject'
            Resource: !Sub '${ResumeBucket.Arn}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  # CloudFront Origin Access Control
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName}-OAC'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: 'cdn'
        - Key: Service
          Value: 'resume-website'
        - Key: CostCenter
          Value: 'website-hosting'
        - Key: Owner
          Value: 'resume-owner'
        - Key: ManagedBy
          Value: 'cloudformation'
      DistributionConfig:
        Aliases: !If
          - HasDomainName
          - [!Ref DomainName]
          - !Ref AWS::NoValue
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # Managed-CachingDisabled
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # Managed-CORS-S3Origin
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03  # Managed-SecurityHeadersPolicy
          Compress: true
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2and3
        IPV6Enabled: true
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt ResumeBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref OriginAccessControl
        PriceClass: PriceClass_100  # Use only North America and Europe edge locations
        ViewerCertificate: !If
          - HasCertificate
          - AcmCertificateArn: !Ref CertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
        Logging: !If
          - EnableAccessLogsCondition
          - Bucket: !GetAtt AccessLogsBucket.DomainName
            IncludeCookies: false
            Prefix: 'cloudfront-logs/'
          - !Ref AWS::NoValue
        WebACLId: !If
          - EnableWAFCondition
          - !GetAtt WebACL.Arn
          - !Ref AWS::NoValue

  # S3 Bucket for Access Logs
  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Condition: EnableAccessLogsCondition
    Properties:
      BucketName: !Sub '${AWS::StackName}-access-logs-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: true
        IgnorePublicAcls: false
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 90
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 60
                StorageClass: GLACIER
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: 'logging'
        - Key: Service
          Value: 'resume-website'
        - Key: CostCenter
          Value: 'website-hosting'
        - Key: Owner
          Value: 'resume-owner'
        - Key: ManagedBy
          Value: 'cloudformation'

  # CloudWatch Log Group for S3 access logs
  S3AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: EnableAccessLogsCondition
    Properties:
      LogGroupName: !Sub '/aws/s3/${AWS::StackName}'
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: 'logging'
        - Key: Service
          Value: 'resume-website'
        - Key: CostCenter
          Value: 'website-hosting'
        - Key: Owner
          Value: 'resume-owner'
        - Key: ManagedBy
          Value: 'cloudformation'

  # Route 53 DNS Record
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: EnableRoute53Condition
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID

  # IAM Role for deployment (GitHub Actions, etc.)
  DeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-deployment-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com'
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'token.actions.githubusercontent.com:aud': 'sts.amazonaws.com'
              StringLike:
                'token.actions.githubusercontent.com:sub': 'repo:*:*'  # Update with your repo
      Policies:
        - PolicyName: S3DeploymentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:ListBucket'
                Resource:
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-resume-${AWS::AccountId}/*'
                  - !Sub 'arn:aws:s3:::${AWS::StackName}-resume-${AWS::AccountId}'
              - Effect: Allow
                Action:
                  - 'cloudfront:CreateInvalidation'
                Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: 'security'
        - Key: Service
          Value: 'resume-website'
        - Key: CostCenter
          Value: 'website-hosting'
        - Key: Owner
          Value: 'resume-owner'
        - Key: ManagedBy
          Value: 'cloudformation'

  # WAF Web ACL for additional security
  WebACL:
    Type: AWS::WAFv2::WebACL
    Condition: EnableWAFCondition
    Properties:
      Name: !Sub '${AWS::StackName}-WebACL'
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      Rules:
        - Name: RateLimitRule
          Priority: 1
          Statement:
            RateBasedStatement:
              Limit: 2000
              AggregateKeyType: IP
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RateLimitRule
        - Name: AWSManagedRulesCommonRuleSet
          Priority: 2
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: CommonRuleSetMetric
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: 'security'
        - Key: Service
          Value: 'resume-website'
        - Key: CostCenter
          Value: 'website-hosting'
        - Key: Owner
          Value: 'resume-owner'
        - Key: ManagedBy
          Value: 'cloudformation'

Outputs:
  BucketName:
    Description: 'S3 Bucket name for website files'
    Value: !Ref ResumeBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'

  CloudFrontDomainName:
    Description: 'CloudFront distribution domain name'
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDomain'

  CloudFrontDistributionId:
    Description: 'CloudFront distribution ID'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-DistributionId'

  WebsiteURL:
    Description: 'Website URL'
    Value: !If
      - HasDomainName
      - !Sub 'https://${DomainName}'
      - !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'

  DeploymentRoleArn:
    Description: 'IAM Role ARN for deployment'
    Value: !GetAtt DeploymentRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DeploymentRoleArn'