name: Deploy Resume Website

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-2  # Melbourne region
  STACK_NAME: resume-website

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || env.AWS_REGION }}
          role-session-name: GitHubActions-ResumeDeployment
      
      - name: Create config.json from secrets
        run: |
          cat > config.json << EOF
          {
            "personal": {
              "name": "${{ secrets.PERSONAL_NAME }}",
              "title": "${{ secrets.PERSONAL_TITLE }}",
              "location": "${{ secrets.PERSONAL_LOCATION }}",
              "email": "${{ secrets.PERSONAL_EMAIL }}",
              "linkedin": "${{ secrets.PERSONAL_LINKEDIN }}",
              "profileImage": "${{ secrets.PROFILE_IMAGE_PATH }}",
              "profileInitials": "${{ secrets.PROFILE_INITIALS }}"
            },
            "summary": "${{ secrets.PROFESSIONAL_SUMMARY }}",
            "experience": ${{ secrets.EXPERIENCE_JSON }},
            "skills": ${{ secrets.SKILLS_JSON }},
            "certifications": ${{ secrets.CERTIFICATIONS_JSON }},
            "education": ${{ secrets.EDUCATION_JSON }}
          }
          EOF
      
      - name: Validate CloudFormation template
        run: |
          aws cloudformation validate-template \
            --template-body file://infrastructure/resume-website.yaml \
            --region ${{ vars.AWS_REGION || env.AWS_REGION }}
      
      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/resume-website.yaml \
            --stack-name ${{ env.STACK_NAME }} \
            --parameter-overrides \
              DomainName=${{ secrets.DOMAIN_NAME }} \
              HostedZoneId=${{ secrets.HOSTED_ZONE_ID }} \
              CertificateArn=${{ secrets.CERTIFICATE_ARN }} \
              EnableWAF=${{ vars.ENABLE_WAF || 'false' }} \
              EnableRoute53=${{ vars.ENABLE_ROUTE53 || 'true' }} \
              EnableAccessLogs=${{ vars.ENABLE_ACCESS_LOGS || 'true' }} \
              Environment=${{ vars.ENVIRONMENT || 'prod' }} \
              ProjectName=${{ vars.PROJECT_NAME || 'resume-website' }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --region ${{ vars.AWS_REGION || env.AWS_REGION }}
      
      - name: Get S3 bucket name
        id: get-bucket
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ vars.AWS_REGION || env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' \
            --output text)
          echo "bucket-name=$BUCKET_NAME" >> $GITHUB_OUTPUT
      
      - name: Upload website files to S3
        run: |
          # Upload static files with long cache
          aws s3 sync . s3://${{ steps.get-bucket.outputs.bucket-name }} \
            --exclude "*.md" \
            --exclude ".git/*" \
            --exclude ".github/*" \
            --exclude "infrastructure/*" \
            --exclude ".gitignore" \
            --cache-control "public, max-age=31536000" \
            --delete
          
          # Upload HTML with shorter cache
          aws s3 cp index.html s3://${{ steps.get-bucket.outputs.bucket-name }}/index.html \
            --content-type "text/html" \
            --cache-control "public, max-age=3600"
          
          # Upload config.json
          aws s3 cp config.json s3://${{ steps.get-bucket.outputs.bucket-name }}/config.json \
            --content-type "application/json" \
            --cache-control "public, max-age=3600"
      
      - name: Get CloudFront distribution ID
        id: get-distribution
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ vars.AWS_REGION || env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
            --output text)
          echo "distribution-id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
      
      - name: Create CloudFront invalidation
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.get-distribution.outputs.distribution-id }} \
            --paths "/*"
      
      - name: Get website URL
        id: get-url
        run: |
          WEBSITE_URL=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ vars.AWS_REGION || env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`WebsiteURL`].OutputValue' \
            --output text)
          echo "website-url=$WEBSITE_URL" >> $GITHUB_OUTPUT
      
      - name: Display deployment info
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "🌐 Website URL: ${{ steps.get-url.outputs.website-url }}"
          echo "📦 S3 Bucket: ${{ steps.get-bucket.outputs.bucket-name }}"
          echo "🌎 CloudFront Distribution: ${{ steps.get-distribution.outputs.distribution-id }}"